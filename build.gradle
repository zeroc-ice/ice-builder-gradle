// Copyright (c) ZeroC, Inc. All rights reserved.

buildscript {
    if(!localOnly.toBoolean()) {
        repositories {
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
        dependencies {
            classpath "com.gradle.publish:plugin-publish-plugin:0.18.0"
        }
    }
}

apply plugin: 'groovy'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    if(!localOnly.toBoolean()) {
        testImplementation 'junit:junit:4.12'
        testImplementation 'com.github.stefanbirkner:system-rules:1.19.0'
    }
}

test {
    testLogging {
        events = ["failed", "skipped"]
        exceptionFormat = "full"
        showStandardStreams = false
    }
    onlyIf { !localOnly.toBoolean() }

    // Test runner needs to dynamically access java.lang and java.util for reflection
    jvmArgs(
        "--add-opens", "java.base/java.lang=ALL-UNNAMED",
        "--add-opens", "java.base/java.util=ALL-UNNAMED"
    )
}

version  = "1.5.2"
group = "com.zeroc.gradle.ice-builder"

if(!localOnly.toBoolean()) {
    apply plugin: "com.gradle.plugin-publish"

    pluginBundle {
        website = 'https://github.com/zeroc-ice/ice-builder-gradle'
        vcsUrl = 'https://github.com/zeroc-ice/ice-builder-gradle.git'
        description = 'Plugin to automate the compilation of Slice files to Java'
        tags = ['zeroc', 'ice', 'slice']

        plugins {
            slicePlugin {
                id = 'com.zeroc.gradle.ice-builder.slice'
                displayName = 'Ice Builder for Gradle'
            }
        }
    }
} else {
    prefix = prefix ? prefix : (System.properties['os.name'].toLowerCase().contains('windows') ?
        "C:\\ice-builder-gradle-${project.version}" : "/opt/ice-builder-gradle-${project.version}")

    def jarDir = (prefix == "/usr" || prefix == "/usr/local") ? "${prefix}/share/java" : "${prefix}/lib"

    def pomName = "$buildDir/libs/${project.name}-${project.version}.pom"
    def pomLicense = project.hasProperty("licenseURL") ?
        project.extlicenseURL :
        "https://github.com/zeroc-ice/ice-builder-gradle/blob/main/LICENSE"

    apply plugin: 'maven-publish'

    tasks.withType(GenerateMavenPom.class) {
        destination = file(pomName)
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId = project.group
                artifactId = 'slice'
                version = project.version

                from components.java
                pom {
                    name = 'Ice Builder for Gradle'
                    description = 'Plugin to automate the compilation of Slice files to Java'
                    url = 'https://zeroc.com'
                    licenses {
                        license {
                            name = 'The BSD 3-Clause License'
                            url = pomLicense
                        }
                    }
                    developers {
                        developer {
                            name = 'ZeroC Developers'
                            email = 'info@zeroc.com'
                            organization = 'ZeroC, Inc.'
                            organizationUrl = 'https://zeroc.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git@github.com/zeroc-ice/ice-builder-gradle.git'
                        url = 'git://github.com/zeroc-ice/ice-builder-gradle.git'
                    }
                }
            }
        }
    }
    assemble.dependsOn(generatePomFileForMavenPublication)

    task groovydocJar(type: Jar, dependsOn: groovydoc) {
        classifier = 'groovydoc'
        from groovydoc
        destinationDir = new File("$buildDir/libs")
    }

    assemble.dependsOn(groovydocJar)

    task sourcesJar(type: Jar, dependsOn: jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
        destinationDir = new File("$buildDir/libs")
    }
    assemble.dependsOn(sourcesJar)

    task install(type: Copy, dependsOn: assemble) {
        from "${pomName}"
        from "$buildDir/libs/${jar.archiveName}"
        from "$buildDir/libs/${project.name}-${project.version}-sources.jar"
        from "$buildDir/libs/${project.name}-${project.version}-groovydoc.jar"
        into "${DESTDIR}${jarDir}"
    }
}
